generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URI")
}

model User {
  id          String      @id @default(uuid())
  email       String      @unique
  phone       String      @unique
  firstname   String      @db.VarChar(255)
  lastname    String      @db.VarChar(255)
  dob         DateTime
  pin         String?
  role        Role        @default(USER)
  totp        Totp?
  wallet      Wallet?
  referral    Referral?
  cart        Cart?
  orders      Order[]
  referred    Referred[]
  txHistories TxHistory[]
  status      UserStatus  @default(ACTIVE)
}

model Cart {
  id        String     @id @default(uuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @unique @db.Uuid
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id       String @id @default(uuid())
  cart     Cart   @relation(fields: [cartId], references: [id])
  cartId   String @db.Uuid
  food     Food   @relation(fields: [foodId], references: [id])
  foodId   String
  quantity Int    @default(1)
  sides    Json?
}

model Order {
  id          String      @id @default(uuid())
  user        User        @relation(fields: [userId], references: [id])
  userId      String      @db.Uuid
  items       OrderItem[]
  totalAmount Float
  address     String
  notes       String?
  status      OrderStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model OrderItem {
  id       String @id @default(uuid())
  order    Order  @relation(fields: [orderId], references: [id])
  orderId  String @db.Uuid
  food     Food   @relation(fields: [foodId], references: [id])
  foodId   String @db.Uuid
  quantity Int    @default(1)
  sides    Json?
}

model Food {
  id          String       @id @default(uuid())
  name        String
  price       Float
  category    FoodCategory
  description String?
  sides       Side[]
  cartItems   CartItem[]
  orderItems  OrderItem[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Side {
  id        String   @id @default(uuid())
  food      Food     @relation(fields: [foodId], references: [id])
  foodId    String   @db.Uuid
  name      String
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Wallet {
  id                  String    @id @default(uuid())
  balance             Float     @default(0.00)
  lastEffect          DateTime  @updatedAt
  lastAmountDeposited Float     @default(0.00)
  lastDepositedAt     DateTime?
  user                User      @relation(fields: [userId], references: [id])
  userId              String    @unique @db.Uuid
}

model Totp {
  id         String   @id @default(uuid())
  otp        String   @unique
  otp_expiry DateTime
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @unique @db.Uuid
}

model TxHistory {
  id                 String  @id @default(uuid())
  type               TxType
  amount             Float
  channel            String?
  authorization_code String?
  status             String
  user               User    @relation(fields: [userId], references: [id])
  userId             String  @unique @db.Uuid
}

model Referral {
  id        String     @id @default(uuid())
  points    Int        @default(0)
  key       String     @unique
  referred  Referred[]
  user      User       @relation(references: [id], fields: [userId])
  userId    String     @unique @db.Uuid
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Referred {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  referral   Referral @relation(fields: [referralId], references: [id])
  referralId String   @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.Uuid
}

enum FoodCategory {
  DRINKS
  FOOD
  JUNKIES
  PASTA
  ASSORTED
}

enum OrderStatus {
  PENDING
  IN_PREPARATION
  READY
  OUT_FOR_DELIVERY
  DELIVERED
}

enum TxType {
  DEPOSIT
  DISBURSEMENT
}

enum UserStatus {
  ACTIVE
  SUSPENDED
}

enum Role {
  USER
  ADMIN
}
